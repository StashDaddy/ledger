{"version":3,"sources":["../node_modules/react-bootstrap/es/Checkbox.js","../node_modules/react-bootstrap/es/ToggleButtonGroup.js","screens/Import.jsx","components/PermissionsEditor.jsx","../node_modules/react-bootstrap/es/ToggleButton.js"],"names":["propTypes","inline","PropTypes","bool","disabled","title","string","validationState","oneOf","inputRef","func","Checkbox","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","_this$props","props","className","style","children","_objectWithoutPropertiesLoose","_splitBsProps","splitBsProps","bsProps","elementProps","input","React","createElement","_extends","ref","type","_classes2","_classes","prefix","classNames","classes","getClassSet","Component","defaultProps","bsClass","name","value","any","onChange","isRequired","ToggleButtonGroup","_proto","getValues","concat","handleToggle","values","isActive","indexOf","filter","n","_this","_this$props2","invariant","ButtonGroup","ValidChildren","map","child","_child$props","cloneElement","checked","chainFunction","UncontrolledToggleButtonGroup","uncontrollable","Button","ToggleButton","processData","csv","allTextLines","split","lines","i","length","data","tarr","j","push","NewCollectionModal","state","fullTransaction","collectionName","componentDidMount","setState","_id","changeCollectionName","e","target","collectionTx","_db","handleClose","collectionRefresh","show","onHide","Header","closeButton","Title","fontSize","fontWeight","marginBottom","Body","componentClass","sm","controlId","placeholder","fullRefresh","NewPredicateModal","multi","unique","index","refreshTx","changeValue","key","newState","restrictCollection","fullTransction","typeList","predicateRefresh","horizontal","onSubmit","preventDefault","onClick","defaultValue","bsSize","Import","rawPredicates","dbCollections","dbPredicates","chosenCollection","containsHeader","tx","offset","count","newCollection","newPredicates","relevantPred","predicateMap","displayAddCollectionModal","displayAddPredicateModal","schemaQuery","collections","select","from","predicates","openApiServer","fileAPISupported","refreshSchema","ip","db","token","displayError","fullDb","opts","endpoint","network","body","auth","flureeFetch","then","response","res","json","result","coll","get","pred","sort","catch","error","onChangeHeader","shift","unshift","window","File","FileReader","FileList","Blob","message","handleFileUpload","reader","file","files","readAsText","onload","parseCSV","onerror","processed","replace","selectRelevantDbPredicates","startsWith","onChangeCollection","onSelectOtherCollection","onSelectFlureePredName","rawPredicateName","flureePredicateName","predMap","getPredNameValidationState","undefined","collection","handleAddCollectionClose","handleAddPredicateClose","generateTx","lookupObj","indices","Object","keys","txArray","row","forEach","idx","splice","paddingLeft","marginTop","color","background","marginLeft","maxWidth","accept","smOffset","striped","bordered","condensed","hover","slice","fontVariant","minWidth","relPred","Editor","JSON","stringify","valueFromTnx","newValue","transact","transaction","loading","setValueFromTnx","nextProps","margin","padding","fontFamily","mode","theme","showPrintMargin","showGutter","width","height","highlightActiveLine","editorProps","$blockScrolling","setOptions","showLineNumbers","tabSize","bsStyle","parse","active","autoComplete"],"mappings":"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","file":"static/js/18.196f31ca.chunk.js","sourcesContent":["import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\n\n/* eslint-disable jsx-a11y/label-has-for */\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport { bsClass, getClassSet, prefix, splitBsProps } from './utils/bootstrapUtils';\nvar propTypes = {\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  title: PropTypes.string,\n\n  /**\n   * Only valid if `inline` is not set.\n   */\n  validationState: PropTypes.oneOf(['success', 'warning', 'error', null]),\n\n  /**\n   * Attaches a ref to the `<input>` element. Only functions can be used here.\n   *\n   * ```js\n   * <Checkbox inputRef={ref => { this.input = ref; }} />\n   * ```\n   */\n  inputRef: PropTypes.func\n};\nvar defaultProps = {\n  inline: false,\n  disabled: false,\n  title: ''\n};\n\nvar Checkbox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Checkbox, _React$Component);\n\n  function Checkbox() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Checkbox.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        inline = _this$props.inline,\n        disabled = _this$props.disabled,\n        validationState = _this$props.validationState,\n        inputRef = _this$props.inputRef,\n        className = _this$props.className,\n        style = _this$props.style,\n        title = _this$props.title,\n        children = _this$props.children,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"inline\", \"disabled\", \"validationState\", \"inputRef\", \"className\", \"style\", \"title\", \"children\"]);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    var input = React.createElement(\"input\", _extends({}, elementProps, {\n      ref: inputRef,\n      type: \"checkbox\",\n      disabled: disabled\n    }));\n\n    if (inline) {\n      var _classes2;\n\n      var _classes = (_classes2 = {}, _classes2[prefix(bsProps, 'inline')] = true, _classes2.disabled = disabled, _classes2); // Use a warning here instead of in propTypes to get better-looking\n      // generated documentation.\n\n\n      process.env.NODE_ENV !== \"production\" ? warning(!validationState, '`validationState` is ignored on `<Checkbox inline>`. To display ' + 'validation state on an inline checkbox, set `validationState` on a ' + 'parent `<FormGroup>` or other element instead.') : void 0;\n      return React.createElement(\"label\", {\n        className: classNames(className, _classes),\n        style: style,\n        title: title\n      }, input, children);\n    }\n\n    var classes = _extends({}, getClassSet(bsProps), {\n      disabled: disabled\n    });\n\n    if (validationState) {\n      classes[\"has-\" + validationState] = true;\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames(className, classes),\n      style: style\n    }, React.createElement(\"label\", {\n      title: title\n    }, input, children));\n  };\n\n  return Checkbox;\n}(React.Component);\n\nCheckbox.propTypes = propTypes;\nCheckbox.defaultProps = defaultProps;\nexport default bsClass('checkbox', Checkbox);","import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport invariant from 'invariant';\nimport { uncontrollable } from 'uncontrollable';\nimport chainFunction from './utils/createChainedFunction';\nimport ValidChildren from './utils/ValidComponentChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nvar propTypes = {\n  /**\n   * An HTML `<input>` name for each child button.\n   *\n   * __Required if `type` is set to `'radio'`__\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value, or array of values, of the active (pressed) buttons\n   *\n   * @controllable onChange\n   */\n  value: PropTypes.any,\n\n  /**\n   * Callback fired when a button is pressed, depending on whether the `type`\n   * is `'radio'` or `'checkbox'`, `onChange` will be called with the value or\n   * array of active values\n   *\n   * @controllable values\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input `type` of the rendered buttons, determines the toggle behavior\n   * of the buttons\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired\n};\nvar defaultProps = {\n  type: 'radio'\n};\n\nvar ToggleButtonGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ToggleButtonGroup, _React$Component);\n\n  function ToggleButtonGroup() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ToggleButtonGroup.prototype;\n\n  _proto.getValues = function getValues() {\n    var value = this.props.value;\n    return value == null ? [] : [].concat(value);\n  };\n\n  _proto.handleToggle = function handleToggle(value) {\n    var _this$props = this.props,\n        type = _this$props.type,\n        onChange = _this$props.onChange;\n    var values = this.getValues();\n    var isActive = values.indexOf(value) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) {\n        onChange(value);\n      }\n\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== value;\n      }));\n    } else {\n      onChange(values.concat([value]));\n    }\n  };\n\n  _proto.render = function render() {\n    var _this = this;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        type = _this$props2.type,\n        name = _this$props2.name,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"type\", \"name\"]);\n\n    var values = this.getValues();\n    !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n    delete props.onChange;\n    delete props.value; // the data attribute is required b/c twbs css uses it in the selector\n\n    return React.createElement(ButtonGroup, _extends({}, props, {\n      \"data-toggle\": \"buttons\"\n    }), ValidChildren.map(children, function (child) {\n      var _child$props = child.props,\n          value = _child$props.value,\n          onChange = _child$props.onChange;\n\n      var handler = function handler() {\n        return _this.handleToggle(value);\n      };\n\n      return React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(value) !== -1,\n        onChange: chainFunction(onChange, handler)\n      });\n    }));\n  };\n\n  return ToggleButtonGroup;\n}(React.Component);\n\nToggleButtonGroup.propTypes = propTypes;\nToggleButtonGroup.defaultProps = defaultProps;\nvar UncontrolledToggleButtonGroup = uncontrollable(ToggleButtonGroup, {\n  value: 'onChange'\n});\nUncontrolledToggleButtonGroup.Button = ToggleButton;\nexport default UncontrolledToggleButtonGroup;","import React from \"react\";\nimport {\n  Button,\n  Checkbox,\n  Col,\n  Form,\n  FormGroup,\n  FormControl,\n  ToggleButton,\n  ToggleButtonGroup,\n  DropdownButton,\n  Table,\n  Modal,\n  MenuItem,\n} from \"react-bootstrap\";\nimport { flureeFetch } from \"../flureeFetch\";\nimport { get } from \"lodash\";\nimport Editor from \"../components/PermissionsEditor\";\n\n\nfunction processData(csv) {\n  var allTextLines = csv.split(/\\r\\n|\\n/);\n  var lines = [];\n  for (var i = 0; i < allTextLines.length; i++) {\n    var data = allTextLines[i].split(\",\");\n    var tarr = [];\n    for (var j = 0; j < data.length; j++) {\n      tarr.push(data[j]);\n    }\n    lines.push(tarr);\n  }\n  return lines;\n}\n\nclass NewCollectionModal extends React.Component {\n  state = {\n    fullTransaction: [],\n    collectionName: null,\n  };\n\n  componentDidMount = () => {\n    this.setState({ fullTransaction: [{ _id: \"_collection\" }] });\n  };\n\n  changeCollectionName = (e) => {\n    const collectionName = e.target.value;\n    const collectionTx = [\n      {\n        _id: \"_collection\",\n        name: collectionName,\n      },\n    ];\n\n    this.setState({\n      collectionName: collectionName,\n      fullTransaction: collectionTx,\n    });\n  };\n\n  render() {\n    const { _db, handleClose, collectionRefresh } = this.props;\n    return (\n      <Modal show onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            <h4 style={{ fontSize: \"20px\", fontWeight: \"lighter\" }}>\n              <i className=\"far fa-object-group\" /> &nbsp;Create New Collection\n            </h4>\n            <hr style={{ marginBottom: \"0px\" }} />\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <FormGroup>\n            <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n              <i className=\"far fa-object-group bg-success permission-icon-small mb10\" />\n              Collection Name:\n            </Col>\n            <Col sm={7}>\n              <FormGroup controlId=\"collectionName\">\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"Collection Name\"\n                  value={this.state.collectionName}\n                  onChange={this.changeCollectionName}\n                />\n              </FormGroup>\n            </Col>\n          </FormGroup>\n          <div className=\"row mt20\">\n            <Editor\n              value={this.state.fullTransaction}\n              _db={_db}\n              handleClose={handleClose}\n              fullRefresh={collectionRefresh}\n            />\n          </div>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nclass NewPredicateModal extends React.Component {\n  state = {\n    fullTransaction: [],\n    name: \"\",\n    type: \"\",\n    multi: false,\n    unique: true,\n    index: true,\n  };\n\n  componentDidMount = () => {\n    this.refreshTx();\n  };\n\n  changeValue = (key, e) => {\n    const newState = {};\n    const value = e.target ? e.target.value : e;\n    newState[key] = value;\n\n    const fullTransaction = this.state.fullTransaction[0];\n    fullTransaction[key] = value;\n\n    if (key === \"type\" && e !== \"ref\") {\n      delete fullTransaction.restrictCollection;\n    }\n\n    newState[\"fullTransaction\"] = [fullTransaction];\n\n    this.setState(newState);\n  };\n\n  refreshTx = () => {\n    const fullTransction = {\n      _id: \"_predicate\",\n      name: this.state.name,\n      type: this.state.type,\n      multi: this.state.multi,\n      unique: this.state.unique,\n      index: this.state.index,\n    };\n\n    if (this.state.restrictCollection) {\n      fullTransction[\"restrictCollection\"] = this.state.restrictCollection;\n    }\n\n    this.setState({ fullTransaction: [fullTransction] });\n  };\n\n  typeList = [\n    \"string\",\n    \"ref\",\n    \"tag\",\n    \"int\",\n    \"long\",\n    \"bigint\",\n    \"float\",\n    \"double\",\n    \"bigdec\",\n    \"instant\",\n    \"boolean\",\n    \"uri\",\n    \"uuid\",\n    \"bytes\",\n    \"json\",\n  ];\n\n  render() {\n    const { _db, handleClose, predicateRefresh } = this.props;\n    return (\n      <Modal show onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            <h4 style={{ fontSize: \"20px\", fontWeight: \"lighter\" }}>\n              <i className=\"fas fa-tag\" /> &nbsp;Create New Predicate\n            </h4>\n            <hr style={{ marginBottom: \"0px\" }} />\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row\">\n            <div className=\"col-sm-12\">\n              <Form horizontal onSubmit={(e) => e.preventDefault()}>\n                <FormGroup>\n                  <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                    <i className=\"fas fa-tag bg-success permission-icon-small mb10\" />\n                    Name:\n                  </Col>\n                  <Col sm={7}>\n                    <FormGroup controlId=\"predicateName\">\n                      <FormControl\n                        type=\"text\"\n                        placeholder=\"Predicate Name\"\n                        value={this.state.name}\n                        onChange={(e) => this.changeValue(\"name\", e)}\n                      />\n                    </FormGroup>\n                  </Col>\n                </FormGroup>\n                <FormGroup>\n                  <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                    <i className=\"fas fa-tag bg-success permission-icon-small mb10\" />\n                    Type:\n                  </Col>\n                  <Col sm={7}>\n                    <DropdownButton\n                      title={this.state.type ? this.state.type : \"Choose Type\"}\n                    >\n                      {this.typeList.map((type) => (\n                        <MenuItem\n                          onClick={() => this.changeValue(\"type\", type)}\n                        >\n                          {type}\n                        </MenuItem>\n                      ))}\n                    </DropdownButton>\n                  </Col>\n                </FormGroup>\n                {this.state.type === \"ref\" ? (\n                  <FormGroup controlId=\"restrictCollection\">\n                    <FormControl\n                      type=\"text\"\n                      placeholder=\"Restrict Collection\"\n                      value={this.state.restrictCollection}\n                      onChange={(e) =>\n                        this.changeValue(\"restrictCollection\", e)\n                      }\n                    />\n                  </FormGroup>\n                ) : null}\n                <FormGroup>\n                  <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                    <i className=\"fas fa-tag bg-success permission-icon-small mb10\" />\n                    Unique\n                  </Col>\n                  <Col sm={7}>\n                    <ToggleButtonGroup\n                      type=\"radio\"\n                      name=\"unique\"\n                      value={this.state.unique}\n                      defaultValue=\"true\"\n                      onChange={(e) => this.changeValue(\"unique\", e)}\n                    >\n                      <ToggleButton bsSize=\"small\" value={true}>\n                        True\n                      </ToggleButton>\n                      <ToggleButton bsSize=\"small\" value={false}>\n                        False\n                      </ToggleButton>\n                    </ToggleButtonGroup>\n                  </Col>\n                </FormGroup>\n                <FormGroup>\n                  <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                    <i className=\"fas fa-tag bg-success permission-icon-small mb10\" />\n                    Multi:\n                  </Col>\n                  <Col sm={7}>\n                    <ToggleButtonGroup\n                      type=\"radio\"\n                      name=\"multi\"\n                      value={this.state.multi}\n                      defaultValue=\"false\"\n                      onChange={(e) => this.changeValue(\"multi\", e)}\n                    >\n                      <ToggleButton bsSize=\"small\" value={true}>\n                        True\n                      </ToggleButton>\n                      <ToggleButton bsSize=\"small\" value={false}>\n                        False\n                      </ToggleButton>\n                    </ToggleButtonGroup>\n                  </Col>\n                </FormGroup>\n                <FormGroup>\n                  <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                    <i className=\"fas fa-tag bg-success permission-icon-small mb10\" />\n                    Index:\n                  </Col>\n                  <Col sm={7}>\n                    <ToggleButtonGroup\n                      type=\"radio\"\n                      name=\"index\"\n                      value={this.state.index}\n                      defaultValue=\"true\"\n                      onChange={(e) => this.changeValue(\"index\", e)}\n                    >\n                      <ToggleButton bsSize=\"small\" value={true}>\n                        True\n                      </ToggleButton>\n                      <ToggleButton bsSize=\"small\" value={false}>\n                        False\n                      </ToggleButton>\n                    </ToggleButtonGroup>\n                  </Col>\n                </FormGroup>\n              </Form>\n            </div>\n          </div>\n          <div className=\"row mt20\">\n            <Editor\n              value={this.state.fullTransaction}\n              _db={_db}\n              handleClose={handleClose}\n              fullRefresh={predicateRefresh}\n            />\n          </div>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nclass Import extends React.Component {\n  state = {\n    rawPredicates: [],\n    data: [],\n    dbCollections: [],\n    dbPredicates: [],\n    chosenCollection: null,\n    containsHeader: true,\n    tx: [],\n    offset: 0,\n    count: 100,\n    newCollection: false,\n    newPredicates: [],\n    relevantPred: [],\n    predicateMap: {},\n    displayAddCollectionModal: false,\n    displayAddPredicateModal: false,\n  };\n\n  schemaQuery = {\n    collections: {\n      select: [\"_collection/name\"],\n      from: \"_collection\",\n    },\n    predicates: {\n      select: [\"_predicate/name\"],\n      from: \"_predicate\",\n    },\n  };\n\n  componentDidMount = () => {\n    const { openApiServer } = this.props._db;\n    if (openApiServer) {\n      this.fileAPISupported();\n      this.refreshSchema();\n    }\n  };\n\n  refreshSchema = () => {\n    const { ip, db, displayError, token } = this.props._db;\n    const fullDb = db.split(\"/\");\n\n    const opts = {\n      ip: ip,\n      endpoint: \"multi-query\",\n      network: fullDb[0],\n      db: fullDb[1],\n      body: this.schemaQuery,\n      auth: token,\n    };\n\n    flureeFetch(opts)\n      .then((response) => {\n        let res = response.json || res;\n        res = res.result || res;\n        const collections = res.collections;\n        const dbCollections = collections.map((coll) =>\n          get(coll, \"_collection/name\")\n        );\n        const predicates = res.predicates;\n        let dbPredicates = predicates\n          .map((pred) => get(pred, \"_predicate/name\"))\n          .sort();\n        this.setState({\n          dbCollections: dbCollections,\n          dbPredicates: dbPredicates,\n        });\n      })\n      .catch((error) => {\n        this.setState({ error: error });\n       \n      });\n  };\n\n  onChangeHeader = (e) => {\n    const containsHeader = e.target.checked;\n    let { data, rawPredicates } = this.state;\n    if (containsHeader) {\n      rawPredicates = data[0];\n      data.shift();\n    } else {\n      data.unshift(rawPredicates);\n      rawPredicates = [];\n    }\n\n    this.setState({\n      containsHeader: containsHeader,\n      data: data,\n      rawPredicates: rawPredicates,\n    });\n  };\n\n  fileAPISupported = () => {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      return true;\n    } else {\n      return this.props._db.displayError({\n        message:\n          \"File API not supported in this browser. Cannot use import tool\",\n      });\n    }\n  };\n\n  handleFileUpload = (e) => {\n    const reader = new FileReader();\n    const file = e.target.files[0];\n    reader.readAsText(file);\n    reader.onload = this.parseCSV;\n    reader.onerror = this.props._db.displayError;\n  };\n\n  parseCSV = (e) => {\n    let csv = e.target.result;\n    csv = csv.replace(/\\r/g, \"\\n\");\n    let processed = processData(csv);\n    let predicates = processed[0];\n    processed.shift();\n    this.setState({ rawPredicates: predicates, data: processed });\n  };\n\n  selectRelevantDbPredicates = () => {\n    const { chosenCollection, dbPredicates } = this.state;\n    let relevantPred = [];\n    if (chosenCollection) {\n      dbPredicates.filter((pred) => {\n        if (pred.startsWith(chosenCollection)) {\n          relevantPred.push(pred);\n        }\n        return null;\n      });\n    }\n\n    this.setState({ relevantPred: relevantPred });\n  };\n\n  onChangeCollection = (coll) => {\n    this.setState({ chosenCollection: coll, newCollection: false }, () =>\n      this.selectRelevantDbPredicates()\n    );\n  };\n\n  onSelectOtherCollection = () => {\n    this.setState({\n      chosenCollection: null,\n      newCollection: true,\n      relevantPred: [],\n    });\n  };\n\n  onSelectFlureePredName = (rawPredicateName, flureePredicateName) => {\n    const predMap = this.state.predicateMap;\n    predMap[rawPredicateName] = flureePredicateName;\n    this.setState({ predicateMap: predMap });\n  };\n\n  getPredNameValidationState = (e) => {\n    if (e !== undefined) {\n      let collection = this.state.chosenCollection;\n      if (e.target.value.startsWith(collection + \"/\")) return \"success\";\n      else if (e.target.value.length > 0) return \"error\";\n      else return null;\n    }\n    return null;\n  };\n\n  handleAddCollectionClose = () => {\n    this.setState({ displayAddCollectionModal: false });\n  };\n\n  handleAddPredicateClose = () => {\n    this.setState({ displayAddPredicateModal: false }, () =>\n      this.selectRelevantDbPredicates()\n    );\n  };\n\n  generateTx = () => {\n  \n    let {\n      data,\n      predicateMap,\n      rawPredicates,\n      chosenCollection,\n      offset,\n      count,\n    } = this.state;\n    let lookupObj = {};\n    for (var i = 0; i < rawPredicates.length; i++) {\n      if (predicateMap[rawPredicates[i]]) {\n        lookupObj[i] = predicateMap[rawPredicates[i]];\n      }\n    }\n\n    let indices = Object.keys(lookupObj);\n    let txArray = [];\n\n    data.map((row) => {\n      let tx = { _id: chosenCollection };\n      indices.forEach((idx) => {\n        let key = lookupObj[idx];\n        let value = get(row, idx);\n        tx[key] = value;\n      });\n      txArray.push(tx);\n      return null;\n    });\n\n    this.setState({ tx: txArray.splice(offset, offset + count) });\n  };\n\n  render() {\n    let {\n      rawPredicates,\n      data,\n      dbCollections,\n      chosenCollection,\n      containsHeader,\n      newCollection,\n      relevantPred,\n    } = this.state;\n    const { openApiServer } = this.props._db;\n    return (\n      <div>\n        {openApiServer ? (\n          <div style={{ paddingLeft: \"40px\", marginTop: \"40px\" }}>\n            {this.state.displayAddCollectionModal ? (\n              <NewCollectionModal\n                _db={this.props._db}\n                handleClose={this.handleAddCollectionClose}\n                collectionRefresh={this.refreshSchema}\n              ></NewCollectionModal>\n            ) : null}\n            {this.state.displayAddPredicateModal ? (\n              <NewPredicateModal\n                _db={this.props._db}\n                handleClose={this.handleAddPredicateClose}\n                predicateRefresh={this.refreshSchema}\n              ></NewPredicateModal>\n            ) : null}\n            <div className=\"row\">\n              <div className=\"col-sm-8\">\n                <h2\n                  className=\"mb10 text-uppercase\"\n                  style={{ color: \"rgb(115, 113, 113\" }}\n                >\n                  <span className=\"account-header\">\n                    Import Data{\" \"}\n                    {chosenCollection ? (\n                      <span>: {chosenCollection} </span>\n                    ) : null}\n                  </span>\n                </h2>\n              </div>\n            </div>\n            <p>Note: This import tool will only work for select datasets.</p>\n            <p>\n              It only works one collection at a time, and only works on\n              one-to-one relationships.\n            </p>\n            <div className=\"row\">\n              <div\n                className=\"col-sm-9 second-row-panel\"\n                style={{\n                  background: \"white\",\n                  marginLeft: \"15px\",\n                  maxWidth: \"95%\",\n                }}\n              >\n                <div className=\"mt10 text-center text-gray-light\">\n                  <h2 className=\"mb20\">Import Data</h2>\n                  <Form horizontal onSubmit={(e) => e.preventDefault()}>\n                    <FormGroup>\n                      <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                        <i className=\"fas fa-file-import bg-success permission-icon-small mb10\" />\n                        Upload File:\n                      </Col>\n                      <Col sm={7}>\n                        <FormGroup controlId=\"fileUpload\">\n                          <FormControl\n                            type=\"file\"\n                            placeholder=\"Upload a File\"\n                            accept=\".csv\"\n                            onChange={this.handleFileUpload}\n                          />\n                        </FormGroup>\n                      </Col>\n                    </FormGroup>\n                    <FormGroup>\n                      <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                        <i className=\"fas fa-file-import bg-success permission-icon-small mb10\" />\n                        Headers:\n                      </Col>\n                      <Col componentClass=\"div\" className=\"text-left\" sm={7}>\n                        <FormGroup>\n                          <Checkbox\n                            checked={containsHeader}\n                            onChange={(e) => this.onChangeHeader(e)}\n                            className=\"text-left\"\n                          >\n                            <p>File Contains Headers</p>\n                          </Checkbox>\n                        </FormGroup>\n                      </Col>\n                      <Col sm={8} smOffset={2}>\n                        <FormGroup>\n                          {data.length > 0 ? (\n                            <div>\n                              <p>\n                                Note: Only up to five columns displayed in\n                                preview\n                              </p>\n                              <Table striped bordered condensed hover>\n                                <thead>\n                                  <tr>\n                                    {rawPredicates.length > 0\n                                      ? rawPredicates\n                                          .slice(0, 5)\n                                          .map((pred) => <th>{pred}</th>)\n                                      : data[0]\n                                          .slice(0, 5)\n                                          .map((data) => <th>No Header</th>)}\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <tr>\n                                    {data[0].slice(0, 5).map((data) => (\n                                      <td>{data}</td>\n                                    ))}\n                                  </tr>\n                                </tbody>\n                              </Table>\n                            </div>\n                          ) : (\n                            <p\n                              style={{\n                                fontVariant: \"small-caps\",\n                                color: \"#ee5050\",\n                              }}\n                            >\n                              No File Uploaded or No Data\n                            </p>\n                          )}\n                        </FormGroup>\n                      </Col>\n                    </FormGroup>\n                    <FormGroup>\n                      <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                        <i className=\"fas fa-file-import bg-success permission-icon-small mb10\" />\n                        Collection:\n                      </Col>\n                      <Col sm={3}>\n                        <FormGroup\n                          controlId=\"chosenCollection\"\n                          className=\"text-left\"\n                        >\n                          <DropdownButton\n                            title={\n                              chosenCollection ? (\n                                chosenCollection\n                              ) : (\n                                <span>\n                                  {newCollection\n                                    ? \"Other\"\n                                    : \"Choose a Collection\"}\n                                </span>\n                              )\n                            }\n                          >\n                            {dbCollections.map((coll) => (\n                              <MenuItem\n                                onClick={() => this.onChangeCollection(coll)}\n                              >\n                                {coll}\n                              </MenuItem>\n                            ))}\n                            <MenuItem\n                              onClick={() =>\n                                this.setState({\n                                  displayAddCollectionModal: true,\n                                })\n                              }\n                            >\n                              <span style={{ color: \"#d8418c\" }}>\n                                New Collection\n                              </span>\n                            </MenuItem>\n                          </DropdownButton>\n                        </FormGroup>\n                      </Col>\n                      <Col sm={4}>\n                        <FormGroup controlId=\"otherCollection\">\n                          {newCollection ? (\n                            <FormControl\n                              type=\"text\"\n                              onChange={(e) =>\n                                this.setState({\n                                  chosenCollection: e.target.value,\n                                })\n                              }\n                            ></FormControl>\n                          ) : null}\n                        </FormGroup>\n                      </Col>\n                    </FormGroup>\n                    <FormGroup>\n                      <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                        <i className=\"fas fa-file-import bg-success permission-icon-small mb10\" />\n                        Predicates\n                      </Col>\n                      <Col sm={12}>\n                        {rawPredicates.length > 0 ? (\n                          <Table>\n                            <thead>\n                              <tr>\n                                <th>Predicate from File</th>\n                                <th>Predicate in FlureeDB</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {rawPredicates.map((pred) => (\n                                <tr>\n                                  <td className=\"text-left\">{pred}</td>\n                                  <td className=\"text-left\">\n                                    <DropdownButton\n                                      style={{ minWidth: \"175px\" }}\n                                      title={\n                                        this.state.predicateMap[pred]\n                                          ? this.state.predicateMap[pred]\n                                          : \"Choose Predicate\"\n                                      }\n                                    >\n                                      {relevantPred.map((relPred) => (\n                                        <MenuItem\n                                          onClick={() =>\n                                            this.onSelectFlureePredName(\n                                              pred,\n                                              relPred\n                                            )\n                                          }\n                                          value={relPred}\n                                        >\n                                          {relPred}\n                                        </MenuItem>\n                                      ))}\n                                      <MenuItem\n                                        onClick={() =>\n                                          this.setState({\n                                            displayAddPredicateModal: true,\n                                          })\n                                        }\n                                      >\n                                        <span style={{ color: \"#d8418c\" }}>\n                                          New Predicate\n                                        </span>\n                                      </MenuItem>\n                                    </DropdownButton>\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </Table>\n                        ) : (\n                          <p\n                            style={{\n                              fontVariant: \"small-caps\",\n                              color: \"#ee5050\",\n                            }}\n                          >\n                            No File Uploaded or No Data\n                          </p>\n                        )}\n                      </Col>\n                    </FormGroup>\n                    <FormGroup>\n                      <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                        <i className=\"fas fa-file-import bg-success permission-icon-small mb10\" />\n                        Count:\n                      </Col>\n                      <Col sm={7}>\n                        <FormGroup controlId=\"count\">\n                          <FormControl\n                            type=\"number\"\n                            placeholder=\"Number of Entries to Upload\"\n                            value={this.state.count}\n                            onChange={(e) =>\n                              this.setState({ count: e.target.value })\n                            }\n                          />\n                        </FormGroup>\n                      </Col>\n                    </FormGroup>\n                    <FormGroup>\n                      <Col componentClass=\"div\" className=\"text-left\" sm={4}>\n                        <i className=\"fas fa-file-import bg-success permission-icon-small mb10\" />\n                        Offset:\n                      </Col>\n                      <Col sm={7}>\n                        <FormGroup controlId=\"offset\">\n                          <FormControl\n                            type=\"number\"\n                            placeholder=\"Number of Entries to Skip\"\n                            value={this.state.offset}\n                            onChange={(e) =>\n                              this.setState({ offset: e.target.value })\n                            }\n                          />\n                        </FormGroup>\n                      </Col>\n                    </FormGroup>\n                    <Button onClick={this.generateTx}>\n                      Generate Import Transaction\n                    </Button>\n                  </Form>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-9 second-row-panel\">\n                <Editor value={this.state.tx} _db={this.props._db}></Editor>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center mt20\">\n            <h3>\n              The Import page is not currently available with a closed API.\n            </h3>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Import;\n","import React, { Component } from \"react\";\nimport { FormGroup, Button } from \"react-bootstrap\";\nimport AceEditor from \"react-ace\";\nimport \"brace/mode/json\";\nimport \"brace/theme/xcode\";\nimport { flureeFetch } from \"../flureeFetch\";\n\nclass Editor extends Component {\n  state = {\n    value: JSON.stringify(this.props.value, null, 2),\n    valueFromTnx: JSON.stringify(this.props.valueFromTnx, null, 2),\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({ value: JSON.stringify(nextProps.value, null, 2) });\n  }\n\n  onChange = (newValue) => {\n    this.setState({ value: newValue });\n  };\n\n  transact = (transaction) => {\n    this.setState({ loading: true });\n    const { ip, db, token } = this.props._db;\n\n    const fullDb = db.split(\"/\");\n\n    const opts = {\n      endpoint: \"transact\",\n      ip: ip,\n      network: fullDb[0],\n      db: fullDb[1],\n      body: transaction,\n      auth: token,\n    };\n\n    flureeFetch(opts)\n      .then((res) => res.json || res)\n      .then((res) => res.result || res)\n      .then((res) => {\n        this.props.fullRefresh(res);\n        this.props.setValueFromTnx(JSON.stringify(res, null, 2));\n      })\n\n      .catch((error) => {\n        this.setState({ loading: false, response: error });\n      });\n  };\n\n  render() {\n    return (\n      <FormGroup>\n        <div style={{ margin: \"5px 40px 0px 20px\" }}>\n          <h2\n            className=\"text-center\"\n            style={{\n              padding: \"2px\",\n              color: \"#8e8989\",\n              fontFamily: \"Open Sans\",\n            }}\n          >\n            Transaction\n          </h2>\n          <AceEditor\n            mode=\"json\"\n            theme=\"xcode\"\n            name=\"user-transaction\"\n            fontSize={14}\n            showPrintMargin={true}\n            showGutter={true}\n            onChange={this.onChange}\n            width={\"90%\"}\n            height={\"150px\"}\n            highlightActiveLine={true}\n            value={this.state.value}\n            editorProps={{ $blockScrolling: true }}\n            setOptions={{\n              showLineNumbers: true,\n              tabSize: 2,\n            }}\n          />\n          <div style={{ width: \"90%\" }} className=\"text-right\">\n            <Button\n              bsStyle=\"success\"\n              className=\"mt10 text-right\"\n              onClick={() => {\n                this.transact(JSON.parse(this.state.value));\n              }}\n            >\n              <i className=\"far fa-edit permission-icon-small\" />\n              Transact!\n            </Button>\n          </div>\n          <div className=\"mt10\">\n            <h2\n              className=\"text-center\"\n              style={{\n                padding: \"2px\",\n                color: \"#8e8989\",\n                fontFamily: \"Open Sans\",\n              }}\n            >\n              Results\n            </h2>\n            <AceEditor\n              mode=\"json\"\n              theme=\"xcode\"\n              name=\"user-transaction\"\n              fontSize={14}\n              showPrintMargin={true}\n              showGutter={true}\n              width={\"90%\"}\n              height={\"150px\"}\n              highlightActiveLine={true}\n              value={this.props.valueFromTnx}\n              editorProps={{ $blockScrolling: true }}\n              setOptions={{\n                showLineNumbers: true,\n                tabSize: 2,\n              }}\n            />\n          </div>\n        </div>\n      </FormGroup>\n    );\n  }\n}\n\nexport default Editor;\n","import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Button from './Button';\nvar propTypes = {\n  /**\n   * The `<input>` `type`\n   * @type {[type]}\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n\n  /**\n   * The HTML input name, used to group like checkboxes or radio buttons together\n   * semantically\n   */\n  name: PropTypes.string,\n\n  /**\n   * The checked state of the input, managed by `<ToggleButtonGroup>`` automatically\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The disabled state of both the label and input\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * [onChange description]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The value of the input, and unique identifier in the ToggleButtonGroup\n   */\n  value: PropTypes.any.isRequired\n};\n\nvar ToggleButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ToggleButton, _React$Component);\n\n  function ToggleButton() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ToggleButton.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        name = _this$props.name,\n        checked = _this$props.checked,\n        type = _this$props.type,\n        onChange = _this$props.onChange,\n        value = _this$props.value,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"name\", \"checked\", \"type\", \"onChange\", \"value\"]);\n\n    var disabled = props.disabled;\n    return React.createElement(Button, _extends({}, props, {\n      active: !!checked,\n      componentClass: \"label\"\n    }), React.createElement(\"input\", {\n      name: name,\n      type: type,\n      autoComplete: \"off\",\n      value: value,\n      checked: !!checked,\n      disabled: !!disabled,\n      onChange: onChange\n    }), children);\n  };\n\n  return ToggleButton;\n}(React.Component);\n\nToggleButton.propTypes = propTypes;\nexport default ToggleButton;"],"sourceRoot":""}
{"version":3,"sources":["components/NetworkScreenCard.jsx","screens/NetworkDashboard.jsx"],"names":["NetworkScreenCard","value","name","tooltipText","id","style","borderRadius","display","flexDirection","justifyContent","backgroundColor","height","OverlayTrigger","placement","overlay","Tooltip","maxWidth","textAlign","cursor","color","fontWeight","paddingTop","NetworkDashboard","arrayOfNetworksDBs","arrayServerStatusObject","_db","networkData","index","leader","raft","term","commit","serverStatusObject","networks","tranxQueue","version","arrayOfNetworks","map","item","Object","keys","numberOfNetworks","length","newDbQueue","currentNetwork","db","split","useState","selectedNetwork","setSelectedNetwork","currentNetworkDataObject","filter","currentNetworkDbsTableBody","status","block","numberOfTranxInQueue","numberOfNewDbInQueue","renderTableHeader","tableHeadings","key","className","Form","marginTop","paddingLeft","FormGroup","ControlLabel","marginRight","onChange","e","target","marginLeft","border","padding","placeholder","striped","bordered","hover","size","rowData","toUpperCase"],"mappings":"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","file":"static/js/20.8770646e.chunk.js","sourcesContent":["import React from \"react\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nexport default function NetworkScreenCard({ value, name, tooltipText = \"\" }) {\n  return (\n    <div\n      id=\"network-screen-card\"\n      style={{\n        borderRadius: \"10px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        backgroundColor: \"#fff\",\n        height: \"100%\",\n      }}\n    >\n      {tooltipText ? (\n        <OverlayTrigger\n          placement={\"top\"}\n          overlay={\n            <Tooltip\n              style={{\n                maxWidth: \"auto\",\n                textAlign: \"left\",\n              }}\n            >\n              {tooltipText}\n            </Tooltip>\n          }\n        >\n          <p\n            style={{ cursor: \"pointer\", color: \"#091133\", textAlign: \"center\" }}\n          >\n            {name}\n          </p>\n        </OverlayTrigger>\n      ) : (\n        <p style={{ color: \"#091133\", textAlign: \"center\" }}>{name}</p>\n      )}\n      <p\n        style={{\n          textAlign: \"center\",\n          color: \"#13c6ff\",\n          fontWeight: \"bold\",\n          paddingTop: \"10px\",\n        }}\n      >\n        {value}\n      </p>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport NetworkScreenCard from \"../components/NetworkScreenCard\";\nimport { Form, FormGroup, ControlLabel } from \"react-bootstrap\";\n\nexport default function NetworkDashboard({ _db }) {\n  const Capitalize = (word) => {\n    return word[0].toUpperCase() + word.substring(1).toLowerCase();\n  };\n\n  const networkData = _db.networkData;\n\n  const { index, leader, raft, id, commit, term } = networkData;\n  const serverStatusObject = networkData[\"svr-state\"];\n\n  const timeOut = networkData[\"timeout-ms\"];\n  const { networks, version } = raft;\n\n  const tranxQueue = raft[\"cmd-queue\"];\n  const arrayOfNetworks = networks.map((item) => Object.keys(item)[0]);\n  const numberOfNetworks = arrayOfNetworks.length;\n  const newDbQueue = raft[\"new-db-queue\"];\n  const currentNetwork = _db.db.split(\"/\")[0];\n  const [selectedNetwork, setSelectedNetwork] = useState(currentNetwork);\n\n  const currentNetworkDataObject = networks.filter(\n    (item) => item[selectedNetwork]\n  )[0][selectedNetwork][\"dbs\"];\n  const currentNetworkDbsArray = Object.keys(currentNetworkDataObject);\n\n  const currentNetworkDbsTableBody = currentNetworkDbsArray.map((item) => {\n    return {\n      db: `${selectedNetwork}/${item}`,\n      status: currentNetworkDataObject[item][\"status\"],\n      block: currentNetworkDataObject[item][\"block\"],\n    };\n  });\n\n  const numberOfTranxInQueue = tranxQueue\n    .filter((item) => {\n      return selectedNetwork === Object.keys(item)[0];\n    })\n    .map((item) => item[selectedNetwork])[0];\n\n  const numberOfNewDbInQueue = newDbQueue\n    .filter((item) => {\n      return selectedNetwork === Object.keys(item)[0];\n    })\n    .map((item) => item[selectedNetwork])[0];\n\n  const serverStatusTableHeadings = [\"Server\", \"Status\"];\n  const tableHeadings = [\"Ledgers\", \"Status\", \"Block\"];\n  const renderTableHeader = (tableHeadings) => {\n    return tableHeadings.map((key, index) => {\n      return (\n        <th style={{ textAlign: \"center\" }} key={index}>\n          {key}\n        </th>\n      );\n    });\n  };\n\n  const renderServerStatusTable = (arrayServerStatusObject) => {\n    return arrayServerStatusObject.map((rowData) => {\n      return (\n        <tr>\n          <td className=\"table-content-centered Block\">{rowData.id}</td>\n          <td className=\"table-content-centered \">\n            {rowData[\"active?\"] ? \"Active\" : \"Inactive\"}\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  const renderNetworkDbsTable = (arrayOfNetworksDBs) => {\n    return arrayOfNetworksDBs.map((rowData) => {\n      return (\n        <tr>\n          <td className=\"table-content-centered Block\">{rowData.db}</td>\n\n          <td className=\"table-content-centered\">\n            {rowData.status.toUpperCase()}\n          </td>\n          <td className=\"table-content-centered\">{rowData.block}</td>\n        </tr>\n      );\n    });\n  };\n\n  return (\n    <div className=\"network-page-wrapper\" style={{ textAlign: \"center\" }}>\n      <Form style={{ marginTop: \"20px\", textAlign: \"left\", paddingLeft: \"2%\" }}>\n        <FormGroup>\n          <ControlLabel style={{ marginRight: \"4px\" }}>Network:</ControlLabel>\n          <select\n            value={selectedNetwork}\n            onChange={(e) => setSelectedNetwork(e.target.value)}\n            style={{\n              marginLeft: \"10px\",\n              borderRadius: \"20px\",\n              border: \"none\",\n              padding: \"2px 4px\",\n              color: \"#13C6FF\",\n              fontWeight: \"bold\",\n            }}\n            placeholder={\"Select Network\"}\n          >\n            <option>Select Network</option>\n            {arrayOfNetworks.map((item) => (\n              <option value={item}>{item}</option>\n            ))}\n          </select>\n        </FormGroup>\n      </Form>\n\n      <div className=\"network-page-main-content-wrapper\">\n        <div className=\"network-page-general-info\">\n          <div className=\"network-page-general-info-row\">\n            <div className=\"network-page-general-info-row-item\">\n              <NetworkScreenCard\n                value={numberOfNetworks}\n                name={\"Networks\"}\n                tooltipText=\"Number of networks present\"\n              />\n            </div>\n            <div className=\"network-page-general-info-row-item\">\n              <NetworkScreenCard\n                value={leader}\n                name={\"Leader\"}\n                tooltipText={\"Server providing the status\"}\n              />\n            </div>\n          </div>\n          <div className=\"network-page-general-info-row\">\n            <div className=\"network-page-general-info-row-item\">\n              <NetworkScreenCard\n                value={index}\n                name={\"Index\"}\n                tooltipText={\"Latest index of Server providing status\"}\n              />\n            </div>\n            <div className=\"network-page-general-info-row-item\">\n              <NetworkScreenCard\n                value={term}\n                name={\"Term\"}\n                tooltipText={\"Latest term in cycle\"}\n              />\n            </div>\n          </div>\n          <div className=\"network-page-general-info-row\">\n            <div className=\"network-page-general-info-row-item\">\n              <NetworkScreenCard\n                value={numberOfTranxInQueue ? numberOfTranxInQueue : 0}\n                name={\"Pending Transactions\"}\n                tooltipText={\"Number of Transactions in queue\"}\n              />\n            </div>\n            <div className=\"network-page-general-info-row-item\">\n              <NetworkScreenCard\n                value={numberOfNewDbInQueue}\n                name={\"Pending Ledgers\"}\n                tooltipText={\"Number of pending new ledgers\"}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"network-page-table-wrapper\">\n          <div style={{ paddingTop: \"20px\" }}>\n            <div>\n              <h3 style={{ padding: \"5px\", textAlign: \"left\" }}>\n                Server Status\n              </h3>\n              <div\n                id=\"scroll-div-container\"\n                className=\"network-page-table-container\"\n              >\n                <table\n                  className=\"block-table block-table-stripes\"\n                  striped\n                  bordered\n                  hover\n                  size=\"sm\"\n                >\n                  <thead style={{ padding: \"15px\" }}>\n                    {renderTableHeader(serverStatusTableHeadings)}\n                  </thead>\n                  <tbody>{renderServerStatusTable(serverStatusObject)}</tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n          <div style={{ paddingTop: \"20px\" }}>\n            <div>\n              <h3 style={{ padding: \"5px\", textAlign: \"left\" }}>\n                Ledgers In{\" \"}\n                <span style={{ color: \"#13c6ff\" }}>\n                  <em>\"{selectedNetwork}\"</em>\n                </span>{\" \"}\n                Network\n              </h3>\n              <div className=\"network-page-table-container\">\n                <table\n                  className=\"block-table block-table-stripes\"\n                  striped\n                  bordered\n                  hover\n                  size=\"sm\"\n                >\n                  <thead style={{ padding: \"15px\" }}>\n                    {renderTableHeader(tableHeadings)}\n                  </thead>\n                  <tbody>\n                    {renderNetworkDbsTable(currentNetworkDbsTableBody)}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}